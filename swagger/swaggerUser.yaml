openapi: 3.0.0
info:
  title: User Management API
  version: 1.0.0
  description: API for managing users, including login, creation, and updates.

servers:
  - url: http://localhost:3000
    description: Local server

paths:
  /:
    get:
      summary: Check server status
      responses:
        '200':
          description: Server is up
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Server is up

  /user/list:
    get:
      summary: Get list of users
      security:
        - JWTAuth: []
      responses:
        '200':
          description: User list with balances
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User list
                  count:
                    type: integer
                    example: 10
                  users:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        name:
                          type: string
                        email:
                          type: string
                        phone_number:
                          type: string
                        balance:
                          type: number
                          format: float

  /user/search/id/{id}:
    get:
      summary: Search user by ID
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: integer
      security:
        - JWTAuth: []
      responses:
        '200':
          description: User found with balance
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User found
                  user:
                    type: object
                    properties:
                      id:
                        type: integer
                      name:
                        type: string
                      email:
                        type: string
                      phone_number:
                        type: string
                      balance:
                        type: number
                        format: float
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User not found

  /user/search/phonenumber/{phone_number}:
    get:
      summary: Search user by phone number
      parameters:
        - name: phone_number
          in: path
          required: true
          description: User phone number
          schema:
            type: string
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User found with balance
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User found
                  user:
                    type: object
                    properties:
                      id:
                        type: integer
                      name:
                        type: string
                      email:
                        type: string
                      phone_number:
                        type: string
                      balance:
                        type: number
                        format: float
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User not found

  /user/search/email/{email}:
    get:
      summary: Search user by email
      parameters:
        - name: email
          in: path
          required: true
          description: User email
          schema:
            type: string
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User found with balance
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User found
                  user:
                    type: object
                    properties:
                      id:
                        type: integer
                      name:
                        type: string
                      email:
                        type: string
                      phone_number:
                        type: string
                      balance:
                        type: number
                        format: float
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User not found

  /user/search/{role}:
    get:
      summary: Search users by role
      parameters:
        - name: role
          in: path
          required: true
          description: User role
          schema:
            type: string
        - $ref: '#/components/parameters/XAuthSecretKeyParam'
      security:
        - BearerAuth: []
        - XAuthSecretKey: []
      responses:
        '200':
          description: List of users with the specified role
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                    example: 5
                  users:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        name:
                          type: string
                        email:
                          type: string
                        phone_number:
                          type: string
                        balance:
                          type: number
                          format: float

  /user/create:
    post:
      summary: Create a new user
      security:
        - BearerAuth: []
        - XAuthSecretKey: []  # Use custom header
      parameters:
        - $ref: '#/components/parameters/XAuthSecretKeyParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                password:
                  type: string
                phone_number:
                  type: string
                nid:
                  type: string
                role:
                  type: string
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User created
                  user:
                    type: object
                    properties:
                      id:
                        type: integer
                      name:
                        type: string
                      email:
                        type: string
                      phone_number:
                        type: string
                      nid:
                        type: string
                      role:
                        type: string
        '400':
          description: Invalid role or user already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '403':
          description: Only admin can create new users
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /user/update/{id}:
    put:
      summary: Update user by ID (Full update)
      security:
        - BearerAuth: []
        - XAuthSecretKey: []
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: integer
        - $ref: '#/components/parameters/XAuthSecretKeyParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                password:
                  type: string
                phone_number:
                  type: string
                nid:
                  type: string
                role:
                  type: string
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User updated
                  user:
                    type: object
                    properties:
                      id:
                        type: integer
                      name:
                        type: string
                      email:
                        type: string
                      phone_number:
                        type: string
                      nid:
                        type: string
                      role:
                        type: string
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '403':
          description: Only admin can update users
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

    patch:
      summary: Partially update user by ID
      description: Update specific fields of a user without requiring all fields
      security:
        - BearerAuth: []
        - XAuthSecretKey: []
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: integer
        - $ref: '#/components/parameters/XAuthSecretKeyParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                password:
                  type: string
                phone_number:
                  type: string
                nid:
                  type: string
                role:
                  type: string
      responses:
        '200':
          description: User partially updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User updated
                  user:
                    type: object
                    properties:
                      id:
                        type: integer
                      name:
                        type: string
                      email:
                        type: string
                      phone_number:
                        type: string
                      nid:
                        type: string
                      role:
                        type: string
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '403':
          description: Only admin can update users
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string



  /user/delete/{id}:
    delete:
      summary: Delete user by ID
      security:
        - BearerAuth: []
        - XAuthSecretKey: []
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: integer
        - $ref: '#/components/parameters/XAuthSecretKeyParam'
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User deleted successfully
        '403':
          description: Cannot delete SYSTEM user or admin
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /user/login:
    post:
      summary: Login and get a JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Login successfully
                  token:
                    type: string
                  role:
                    type: string
                  expiresIn:
                    type: string
        '400':
          description: Missing or invalid login data
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '401':
          description: Incorrect password
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /user/upload/{id}:
    post:
      summary: Upload a photo for a user
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: integer
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
      responses:
        '200':
          description: Photo uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Photo uploaded successfully
                  photo:
                    type: string
        '400':
          description: No file uploaded
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '500':
          description: Error uploading photo
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /user/uploads/{file}:
    get:
      summary: Retrieve uploaded user photo
      description: Get the uploaded image file for a user
      parameters:
        - name: file
          in: path
          required: true
          description: Filename of the uploaded image
          schema:
            type: string
      responses:
        '200':
          description: Image file retrieved successfully
          content:
            image/*:
              schema:
                type: string
                format: binary
        '404':
          description: Image file not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Image not found

components:
  securitySchemes:
    JWTAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  XAuthSecretKey:
      type: apiKey
      in: header
      name: X-AUTH-SECRET-KEY

  parameters:
    XAuthSecretKeyParam:
      name: X-AUTH-SECRET-KEY
      in: header
      description: Custom header required for API authentication
      required: true
      schema:
        type: string
